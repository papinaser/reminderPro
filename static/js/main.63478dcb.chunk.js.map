{"version":3,"sources":["Reminders.js","App.js","store/actions/index.js","constants.js","serviceWorker.js","store/reducers/index.js","index.js"],"names":["Reminders","props","reminders","react_default","a","createElement","className","map","remind","key","id","text","moment","Date","dueDate","fromNow","onClick","clicked","length","clearClicked","type","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","txtReminder","txtDueDate","onAddReminder","addReminder","current","value","onDeleteReminder","deleteReminder","onClearClicked","clearReminders","React","createRef","ref","placeholder","src_Reminders","Component","connect","state","Boolean","window","location","hostname","match","reminerReducer","arguments","undefined","action","newState","read_cookie","toConsumableArray","push","Math","random","reminder","bake_cookie","filter","rem","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63478dcb.chunk.js","sourcesContent":["import React from \"react\"\r\nimport moment from \"moment\";\r\n\r\nconst Reminders = (props) => {\r\n    const {reminders} = props;\r\n\r\n    return (\r\n        <div className={\"col-sm-4\"}>\r\n            <ul className={\"list-group\"}>\r\n                {\r\n                    reminders.map(remind => {\r\n                        return <li key={remind.id} className={\"list-group-item\"}>\r\n                            <div className={\"list-item\"}>\r\n                                <div>{remind.text}</div>\r\n                                <div><em>{new moment(new Date(remind.dueDate)).fromNow()}</em></div>\r\n                            </div>\r\n                            <div\r\n                                onClick={() => props.clicked(remind.id)}\r\n                                className={\"list-item delete-button\"}>\r\n                                &#x2715;\r\n                            </div>\r\n                        </li>\r\n                    })\r\n                }\r\n            </ul>\r\n            {\r\n                reminders.length === 0 ? null :\r\n                    <button onClick={() => props.clearClicked()} type={\"button\"} className={\"clearAll btn btn-danger\"}>\r\n                        Clear All\r\n                    </button>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Reminders;","import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport {addReminder, deleteReminder, clearReminders} from \"./store/actions\"\nimport './App.css';\nimport Reminders from \"./Reminders\";\n\nclass App extends Component {\n    txtReminder = null;\n    txtDueDate = null;\n\n    constructor(props) {\n        super(props);\n        this.txtReminder = React.createRef();\n        this.txtDueDate = React.createRef();\n    }\n\n    onAddReminder = () => {\n        this.props.addReminder(this.txtReminder.current.value, this.txtDueDate.current.value);\n    };\n    onDeleteReminder = (id) => {\n        this.props.deleteReminder(id);\n    };\n    onClearClicked = () => {\n        this.props.clearReminders();\n    };\n  render() {\n    return (\n      <div className=\"App\">\n          <div className={\"title\"}>\n              Reminder Pro\n          </div>\n          <div className={\"form-inline reminder-form\"}>\n              <div className={\"form-group\"}>\n                  <input ref={this.txtReminder} className={\"form-control\"} placeholder={\"I have to...\"}/>\n                  <input ref={this.txtDueDate} type={\"datetime-local\"} className={\"form-control\"}\n                         placeholder={\"due date...\"}/>\n              </div>\n              <button onClick={this.onAddReminder} type={\"button\"} className={\"btn btn-success\"}>Add Reminder</button>\n          </div>\n          <Reminders reminders={this.props.reminders} clicked={this.onDeleteReminder}\n                     clearClicked={this.onClearClicked}/>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        reminders: state\n    }\n};\n\nexport default connect(mapStateToProps, {addReminder, deleteReminder, clearReminders})(App);\n","import {ADD_REMINDER, CLEAR_ALL, DELETE_REMINDER} from \"../../constants\";\r\n\r\nexport const addReminder = (text, dueDate) => {\r\n    return {\r\n        type: ADD_REMINDER,\r\n        text,\r\n        dueDate\r\n    }\r\n};\r\n\r\nexport const deleteReminder = (id) => {\r\n    return {\r\n        type: DELETE_REMINDER,\r\n        id\r\n    }\r\n};\r\n\r\nexport const clearReminders = () => {\r\n    return {\r\n        type: CLEAR_ALL\r\n    }\r\n};","export const ADD_REMINDER = \"ADD_REMINDER\";\r\nexport const DELETE_REMINDER = \"DELETE_REMINDER\";\r\nexport const CLEAR_ALL = \"CLEAR_ALL\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_REMINDER, DELETE_REMINDER, CLEAR_ALL} from \"../../constants\";\r\nimport {bake_cookie, read_cookie} from \"sfcookies\";\r\n\r\nconst initialState = [];\r\n\r\nconst reminder = (action) => {\r\n    const {text, dueDate} = action;\r\n    return {\r\n        id: Math.random(),\r\n        text,\r\n        dueDate\r\n    }\r\n};\r\nconst onDeleteReminder = (state = [], id) => {\r\n    return state.filter(rem => rem.id !== id);\r\n};\r\nconst reminerReducer = (state = initialState, action) => {\r\n    let newState = null;\r\n    state = read_cookie(\"reminders\");\r\n    switch (action.type) {\r\n        case ADD_REMINDER:\r\n            newState = [...state];\r\n            newState.push(reminder(action));\r\n            bake_cookie(\"reminders\", newState);\r\n            return newState;\r\n        case DELETE_REMINDER:\r\n            newState = onDeleteReminder(state, action.id);\r\n            bake_cookie(\"reminders\", newState);\r\n            return newState;\r\n        case CLEAR_ALL:\r\n            newState = [];\r\n            bake_cookie(\"reminders\", newState);\r\n            return newState;\r\n        default:\r\n            return state;\r\n\r\n    }\r\n};\r\n\r\nexport default reminerReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport reminerReducer from \"./store/reducers\";\n\nconst store = createStore(reminerReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}